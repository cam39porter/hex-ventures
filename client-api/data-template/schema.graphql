type Edge {
  source: String!
  destination: String!
  type: EdgeType!
  salience: Float
}

type Graph {
  nodes: [Node!]!
  edges: [Edge!]!
}

type Node {
  id: String!
  type: NodeType!
  text: String!
  level: Int
}

enum NodeType {
  Capture
  Entity
  Tag
  Session
  Link
}

enum EdgeType {
  REFERENCES
  TAGGED_WITH
  INCLUDES
  LINKS_TO
  COMMENTED_ON
}

type SearchResults {
  graph: Graph! # for generating the graph visualization,
  pageInfo: PageInfo!
}

type PageInfo {
  start: Int!
  count: Int!
  total: Int!
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  search(rawQuery: String!, start: Int = 0, count: Int = 10): SearchResults!
  get(id: String!): Graph!
  getAll(useCase: String!, timezoneOffset: Int): SearchResults!
}

enum GetAllUseCase {
  CAPTURED_TODAY
}

enum CaptureRelationType {
  COMMENTED_ON
}

input CaptureRelation {
  captureId: String
  relationshipType: CaptureRelationType
}

type Mutation {
  createCapture(
    body: String!
    sessionId: String
    captureRelation: CaptureRelation
  ): Graph!
  createSession(title: String!): Node!
  archiveCapture(id: String!): Boolean
  editCapture(id: String!, body: String!): Boolean
}
