type SurfaceResults {
  pivot: Node # for detailed view, the node being asked for
  graph: Graph! # for generating the graph visualization,
  pageInfo: PageInfo!
}

type SearchResults {
  captures: CaptureCollection
  sessions: SessionCollection
}

type SessionCollection {
  items: [Session!]
  pagingInfo: PagingInfo
}

type SessionItemCollection {
  items: [SessionItem!]
  pagingInfo: PagingInfo!
}

union SessionItem = Capture

type Session {
  id: ID!
  title: String
  body: String
  created: Float!
  lastModified: Float!
  itemCollection: SessionItemCollection
}

type CaptureCollection {
  items: [Capture!]!
  pagingInfo: PagingInfo!
}

type Capture {
  id: ID!
  body: String!
  created: Float!
  lastModified: Float!
  parents: [Session!]
}

type ListItem {
  id: String!
  text: AnnotatedText!
  reasons: [RecommendationReason]! # empty if root item
  relatedItems: [ListItem]
}

type RecommendationReason {
  reasonType: ReasonType!
  pivot: String
}

enum ReasonType {
  SHARES_TAG
  SHARES_ENTITY
  SHARES_LINK
  SHARES_SESSION
  SHARES_IMPORT_NOTE
  PREVIOUS
  COMMENTED_ON
  DEFAULT
}

type AnnotatedText {
  text: String!
  annotations: [Annotation!]!
}

type Annotation {
  linkToId: String # can be used for getting detail view of relationship (naming id prevnets right number of results returning)
  type: AnnotationType!
  start: Int!
  end: Int!
}

enum AnnotationType {
  HIGHLIGHT
}

type Graph {
  nodes: [Node!]!
  edges: [Edge!]!
}

type Edge {
  source: String!
  destination: String!
  type: EdgeType!
  salience: Float
}

type Node {
  id: String!
  type: NodeType!
  text: String
  resultClass: ResultClass
  parents: [Session!]!
}

enum NodeType {
  Capture
  Entity
  Tag
  Session
  Link
}

enum ResultClass {
  DIRECT_RESULT
  RELATED
}

enum EdgeType {
  REFERENCES
  TAGGED_WITH
  INCLUDES
  LINKS_TO
  COMMENTED_ON
  PREVIOUS
}

type PageInfo {
  start: Int!
  count: Int!
  total: Int
}

type PagingInfo {
  nextPageId: String # if empty, no more pages
  total: Int # total number of records, empty if this number is not available
}

type Settings {
  storageUsed: Int!
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  getSettings: Settings!
  search(rawQuery: String!, start: Int = 0, count: Int = 10): SurfaceResults!
  searchV2(
    rawQuery: String!
    capturePagingContext: PagingContext
    sessionPagingContext: PagingContext
  ): SearchResults!
  getDetailed(id: String!): SurfaceResults!
  getAll(useCase: String!, timezoneOffset: Int): SurfaceResults!
  getMostRecent(start: Int = 0, count: Int = 10): SurfaceResults!
  getSession(id: String!, itemsPagingContext: PagingContext): Session!
  getRecentSessions(pagingContext: PagingContext): SessionCollection!
  getRecentCaptures(pagingContext: PagingContext): CaptureCollection!
  getRelatedCapturesBySession(
    id: String!
    pagingContext: PagingContext
  ): CaptureCollection!
}

enum GetAllUseCase {
  CAPTURED_TODAY
  MOST_RECENT
  RANDOM
}

input PagingContext {
  pageId: String
  count: Int!
}

type Mutation {
  createCapture(body: String!, sessionId: String, previousId: String): Node!
  createSession(title: String, firstCaptureId: String, tags: [String!]): Node!
  editSession(id: String!, title: String, tags: [String!], body: String): Node!
  deleteCapture(id: String!): Boolean!
  deleteSession(id: String!): Boolean!
  editCapture(id: String!, body: String!): Node!
  dismissCaptureRelation(fromId: String!, toId: String!): Boolean
  sendFeedback(body: String!): Boolean
  reportError(message: String, stacktrace: String): Boolean
}
